#version 400 core

in vec3 position;
layout(location = 2) in vec3 normal;

out vec4 colour;
out vec3 unitLight;
out vec3 unitCamera;
out vec3 vertexNormal;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 transform;

uniform vec3 lightPos;

void main(void){
	vec4 worldPos = transform*vec4(position, 1.0);
	vec4 cameraRelative = view*worldPos;
	gl_Position = projection * cameraRelative;
	
	
	colour = vec4(0.0,1.0,0.0,1.0);
	
	unitLight = lightPos-worldPos.xyz;
	unitCamera = (inverse(view) * vec4(0,0,0,1)).xyz - worldPos.xyz;
	vertexNormal = normal;
}