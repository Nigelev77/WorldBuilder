#version 400 core

layout( location=0) in vec3 vertex_position;
layout( location=2) in vec3 vertex_normal;


out vec4 outColour;
out vec3 unitLight;
out vec3 unitCamera;
out vec3 normal;

uniform mat4 projectMatrix;
uniform mat4 viewMatrix;
uniform mat4 transform;

uniform vec3 lightPos;

void main(void){

	vec4 worldPos = transform*vec4(vertex_position, 1.0);
	vec4 cameraRelative = viewMatrix*worldPos;
	gl_Position =projectMatrix*cameraRelative;
	
	
	outColour = vec4(vertex_position, 1.0);
	
	unitLight = normalize(lightPos-worldPos.xyz);
	unitCamera = normalize((inverse(viewMatrix) *vec4(0,0,0,1.0)).xyz - worldPos.xyz);
	normal = (transform* vec4(vertex_normal,0.0)).xyz;
	
}